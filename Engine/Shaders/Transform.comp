#version 450 core

struct Transform
{
	vec3 localPosition;
	uint reserved0;
	vec3 localEulerAngles;
	uint reserved1;
	vec3 localScale;
	uint reserved2;
	vec3 localRight;
	uint reserved3;
	vec3 localUp;
	uint reserved4;
	vec3 localFront;
	uint reserved5;
	vec3 worldPosition;
	uint reserved6;
	vec4 localRotation;
	vec4 worldRotation;
	uint parentIndex;
	uint levelIndex;
	uint allocated;
	uint worldSpace;
};

layout(binding = 0) uniform TimeInfo
{
	float time;
	float deltaTime;
} timeInfo;

layout(binding = 1) uniform ProjectionInfo
{
	mat4 view;
	mat4 projection;
} projectionInfo;

layout(binding = 2) buffer TransformBuffer
{
	Transform transforms[];
} transformBuffer;

layout(binding = 3) readonly buffer ParentTransformBuffer
{
	Transform transforms[];
} parentTransformBuffer;

layout (local_size_x = 32) in;

vec4 conjugateQuaternion(in vec4 q)
{
	return vec4(-q.x, -q.y, -q.z, q.w);
}

vec4 inverseQuaternion(in vec4 q)
{
	return conjugateQuaternion(q) / dot(q, q);
}

vec4 normalizeQuaternion(in vec4 q)
{
    return q / sqrt(dot(q, q));
}

vec4 multiplyQuaternions(in vec4 q, in vec4 b)
{
    float w1 = q.w, x1 = q.x, y1 = q.y, z1 = q.z;
    float w2 = b.w, x2 = b.x, y2 = b.y, z2 = b.z;
    return vec4
	(
		w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2,
		w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2,
		w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2,
		w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2
	);
}

vec4 quaternionFromAxisAngle(in vec3 v, in float a)
{
    float h = a * 0.5;
    return vec4(v * sin(h), cos(h));
}

vec3 rotateVectorByQuaternion(in vec4 q, in vec3 v)
{
	return v + 2.0 * cross(cross(v, q.xyz) + q.w * v, q.xyz);
}

void main()
{
	uint transformIndex = gl_GlobalInvocationID.x;

	Transform transform = transformBuffer.transforms[transformIndex];

	if (transform.allocated == 1)
	{
		vec3 localEulerAngles = radians(transform.localEulerAngles);

		if (transform.levelIndex == 0)
		{
			transformBuffer.transforms[transformIndex].worldRotation = transform.localRotation;
			transformBuffer.transforms[transformIndex].worldPosition = transform.localPosition;
		}
		else
		{
			Transform parentTransform = parentTransformBuffer.transforms[transform.parentIndex];

			vec4 rotationX = quaternionFromAxisAngle(parentTransform.localRight, localEulerAngles.x);
			vec4 rotationY = quaternionFromAxisAngle(parentTransform.localUp, localEulerAngles.y);
			vec4 rotationZ = quaternionFromAxisAngle(parentTransform.localFront, localEulerAngles.z);

			vec4 localRotation = rotationY;
			localRotation = multiplyQuaternions(rotationX, localRotation);
			localRotation = multiplyQuaternions(rotationZ, localRotation);

			transformBuffer.transforms[transformIndex].localRight = rotateVectorByQuaternion(localRotation, parentTransform.localRight);
			transformBuffer.transforms[transformIndex].localUp = rotateVectorByQuaternion(localRotation, parentTransform.localUp);
			transformBuffer.transforms[transformIndex].localFront = rotateVectorByQuaternion(localRotation, parentTransform.localFront);

			if (transform.worldSpace == 1)
			{
				transformBuffer.transforms[transformIndex].worldRotation = multiplyQuaternions(localRotation, parentTransform.worldRotation);
				transformBuffer.transforms[transformIndex].worldPosition = parentTransform.worldPosition + rotateVectorByQuaternion(transform.localRotation, transform.localPosition) * transform.localScale;
			}
			else
			{
				transformBuffer.transforms[transformIndex].worldRotation = multiplyQuaternions(localRotation, parentTransform.worldRotation);
				transformBuffer.transforms[transformIndex].worldPosition = parentTransform.worldPosition + rotateVectorByQuaternion(transform.worldRotation, -transform.localPosition) * transform.localScale;
			}
		}
	}
}